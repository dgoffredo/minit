# minit: the make-based init system

# This makefile requires GNU make.

# $foo for each services/$foo found by services/*
SERVICES := $(patsubst services/%,%,$(wildcard services/*))

# See https://stackoverflow.com/questions/322936
MAKE_DIR := $(dir $(firstword $(MAKEFILE_LIST)))

LOG_DIR := $(MAKE_DIR)/../../var/log/minit/$(shell date --utc +%s.%N)

# Start all of the services.  This depends on the touch files in started/
.PHONY: start
start: $(SERVICES:%=started/%)
	rm -f started/* makefiles/*
	printf "\nSuccessfully started all services.\n"

# Stop all of the services.  This depends on the touch files in stopped/
.PHONY: stop
stop: $(SERVICES:%=stopped/%)
	rm -f stopped/* makefiles/*
	printf "\nSuccessfully stopped all services.\n"

# There's a new log directory every run.
$(LOG_DIR).start:
	mkdir -p $@

$(LOG_DIR).stop:
	mkdir -p $@

# Remove any intermediate files (e.g. touch files) produced by this makefile.
.PHONY: clean
clean:
	rm -f started/* stopped/* makefiles/* dependencies.edges

# Each service gets its own makefile.  The makefile for that service (let's
# call it $service) defines make targets for:
# - its log directory $(LOG_DIR)/$service
# - its "start" touch file, started/$service, created on service start
# - its "stop" touch file, stopped/$service, created on service stop
#
# Each service makefile is generated by a script, bin/serivce-makefile, that
# takes as its comment line arguments:
# - the name of the service (here $* extracts the "%" from the target pattern)
# - the path to the dependency graph file, "dependencies.edges"
# - the directory created for logs related to this run
makefiles/%: dependencies.edges
	bin/service-makefile $* $^ $(LOG_DIR) >$@

# Combine all of the information in services/*/deps into one directed graph.
dependencies.edges: services/*/deps
	bin/combine-dependencies $^ >$@

# Include the generated makefiles, one for each service.  These makefiles
# contain the rules for starting and stopping each service.
include $(SERVICES:%=makefiles/%)
